<apex:component controller="Multiple_Upload_Controller"> 
    <apex:attribute name="parentId" description="The ID of the record uploaded documents will be attached to." type="String" required="true"/>
    <apex:stylesheet value="{!URLFOR($Resource.SLDS221,'assets/styles/salesforce-lightning-design-system-vf.css')}" />

    <!-- <link rel="stylesheet" type="text/css" href="{!$Resource.FileUploadCSS}"/>-->
    <style type="text/css">
        .txt{
        color: blue;
        font-size: 25px;
        font-weight: bold;
        }
       
        .button {
   background-color: #4747d1;
   border: none;
   color: white;
   padding: 15px 32px;
   text-align: center;
   text-decoration: none;
   display: inline-block;
   font-size: 13px;
   margin: 4px 2px;
   border-radius: 5px;
   
 
    
}
        .buttonTD{
        padding-left: 6px;
        }
        .clear{
        clear:both;
        }
        .fileName{
        float: left;
        max-width: 235px;
        overflow: hidden;
        position: absolute;
        text-overflow: ellipsis;
        white-space: nowrap;
        }
        .percentComplete{
        float: right;
        }
        .statusBar{
        background: none repeat scroll 0 0 #FFFFFF;
        border: 1px solid #EAEAEA;
        height: 11px;
        padding: 0 2px 0 0;
        }
        .statusBarPercent{
        background-color: #1797C0;
        float: left;
        height: 9px;
        margin: 1px;
        max-width: 100%;
        }
        .statusBarPercentError{
        background-color: #CE0000;
        }
        .upload{
        background-color: white;
        border: 1px solid #CACACA;
        border-radius: 3px 3px 3px 3px;
        margin-top: 6px;
        padding: 4px;
        }
        .uploadBox{
        background-color: none;
        border-radius: 4px 4px 4px 4px;
        color: #333333;
        font-size: 12px;
        padding: 6px;
        width: 100%;
        }
        .uploadError{
        border-color: #CE0000;
        }
        .uploadTable{
        margin-left: auto;
        margin-right: auto;
        }
        
    </style>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"/>
    <script type="text/javascript">
        var j$ = jQuery.noConflict();
    j$(document).ready(function() {
        //Event listener for click of Upload button
        j$("#uploadButton").click(function(){
            //alert('test alert');
            prepareFileUploads();
        });
        
        //Event listener to clear upload details/status bars once upload is complete
        j$("#clear").on('click',function(){
            j$(".upload").remove();
        });
    });
    
    var byteChunkArray;
    var files;
    var currentFile;
    var $upload;
    var CHUNK_SIZE = 360000; //Must be evenly divisible by 3, if not, data corruption will occur
    var VIEW_URL = '/servlet/servlet.FileDownload?file=';
    //var parentId, you will see this variable used below but it is set in the component as this is a dynamic value passed in by component attribute
    
    //Executes when start Upload button is selected
    function prepareFileUploads(){
        //Get the file(s) from the input field
        files = document.getElementById('filesInput').files;
        //alert('files?'+files);
        //Only proceed if there are files selected
        if(files.length == 0){
            // alert('Please select a file!');
            return; //end function
        }
        
        //Disable inputs and buttons during the upload process
        j$(".uploadBox input").attr("disabled", "disabled");
        j$(".uploadBox button").attr({
            disabled: "disabled",
            class: "btnDisabled"
        });
        
        //Build out the upload divs for each file selected
        var uploadMarkup = '';
        for(i = 0; i < files.length; i++){
            //Determine file display size
            if(files[i].size < 1000000){
                //alert('inside if'+files[i].size);
                var displaySize = Math.floor(files[i].size/1000) + 'K';
            }else{
                //alert('inside else'+files[i].size);
                var displaySize = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
            }
            
            //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
            uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
            uploadMarkup += '<div class="fileName"><span class="name">'+ files[i].name + '</span> - '+ displaySize+ '</div>';
            uploadMarkup += '<div class="percentComplete">0%</div>'
            uploadMarkup += '<div class="clear"/>';
            uploadMarkup += '<div class="statusBar">';
            uploadMarkup += '<div class="statusBarPercent"/>';
            uploadMarkup += '</div>';
            uploadMarkup += '</div>';
        }
        
        //Add markup to the upload box
        j$('.uploadBox').append(uploadMarkup);
        
        //Once elements have been added to the page representing the uploads, start the actual upload process
        checkForUploads();
    }
    
    function checkForUploads(){
        //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
        $upload = j$(".upload:first[data-status='pending']");
        
        if($upload.length != 0){
            //Based on index of the div, get correct file from files array
            currentFile = files[$upload.attr('data-index')];
            //alert('file?'+currentFile);
            /*Build the byteChunkArray array for the current file we are processing. This array is formatted as:
        ['0-179999','180000-359999',etc] and represents the chunks of bytes that will be uploaded individually.*/
        byteChunkArray = new Array();
            //var CHUNK_SIZE = currentFile.size*3;
        //First check to see if file size is less than the chunk size, if so first and only chunk is entire size of file
        if(currentFile.size <= CHUNK_SIZE){
            //alert('Size of file'+currentFile.size);   
            byteChunkArray[0] = '0-' + (currentFile.size - 1);
        }else{
            //Determine how many whole byte chunks make up the file,
            var numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE); //i.e. 1.2MB file would be 1000000 / CHUNK_SIZE
            var remainderBytes = currentFile.size % CHUNK_SIZE; // would determine remainder of 1200000 bytes that is not a full chunk
            var startByte = 0;
            var endByte = CHUNK_SIZE - 1;
            //alert('number of chunks'+numOfFullChunks);
            //Loop through the number of full chunks and build the byteChunkArray array
            for(i = 0; i < numOfFullChunks; i++){
                byteChunkArray[i] = startByte+'-'+endByte;
                
                //Set new start and stop bytes for next iteration of loop
                startByte = endByte + 1;
                endByte += CHUNK_SIZE;
            }
            
            //Add the last chunk of remaining bytes to the byteChunkArray
            startByte = currentFile.size - remainderBytes;
            endByte = currentFile.size;
            byteChunkArray.push(startByte+'-'+endByte);
        }
        
        //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
        processByteChunkArray('');
        
    }else{
       
        //All uploads completed, enable the input and buttons
        j$(".uploadBox input").removeAttr("disabled");
        j$(".uploadBox button").removeAttr("disabled").attr("class","btn");
        
        /*Remove the browse input element and replace it, this essentially removes
        the selected files and helps prevent duplicate uploads*/
        j$("#filesInput").replaceWith('<input type="file" name="file" multiple="true" id="filesInput">');
        
    }
    }
    
    //Uploads a chunk of bytes, if attachmentId is passed in it will attach the bytes to an existing attachment record
    function processByteChunkArray(attachmentId){
         //alert('byteChunkArray'+byteChunkArray.length);
        var valuetosend = byteChunkArray.length;
        //alert('valuetosend'+valuetosend.length);
        //Proceed if there are still values in the byteChunkArray, if none, all piece of the file have been uploaded
        if(byteChunkArray.length > 0){
            //Determine the byte range that needs to uploaded, if byteChunkArray is like... ['0-179999','180000-359999']
            var indexes = byteChunkArray[0].split('-'); //... get the first index range '0-179999' -> ['0','179999']
            var startByte = parseInt(indexes[0]); //0
            var stopByte = parseInt(indexes[1]); //179999
            //alert('stopByte'+stopByte);
            //alert('current file?'+currentFile);
            //Slice the part of the file we want to upload, currentFile variable is set in checkForUploads() method that is called before this method
            var blobChunk = "";
            if (currentFile.mozSlice){
                blobChunk = currentFile.mozSlice(startByte , stopByte + 1);
                //alert('mozilla');
            }else {
                blobChunk = currentFile.slice(startByte , stopByte + 1);
                //alert('chrome');
            }
            
            //Create a new reader object, part of HTML5 File API
            var reader = new FileReader();
            //alert('blobchunk'+blobChunk);
            //Read the blobChunk as a binary string, reader.onloadend function below is automatically called after this line
            reader.readAsBinaryString(blobChunk);
            
            //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
            reader.onloadend = function(evt){
                if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                    //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                    var base64value = window.btoa(evt.target.result);
                    // alert('read successfull');
                    //Use js remoting to send the base64 encoded chunk for uploading
                    Multiple_Upload_Controller.attachBlob(parentId,attachmentId,currentFile.name,valuetosend,currentFile.type,base64value,function(result,event){
                        
                        //Proceed if there were no errors with the remoting call
                        if(event.status == true){
                            // alert('successfull remoting');
                            //Update the percent of the status bar and percent, first determine percent complete
                            var percentComplete = Math.round((stopByte / currentFile.size) * 100);
                            $upload.find(".percentComplete").text(percentComplete + '%');
                            $upload.find(".statusBarPercent").css('width',percentComplete + '%');
                            
                            //Remove the index information from the byteChunkArray array for the piece just uploaded.
                            byteChunkArray.shift(); //removes 0 index
                            //alert('shift'+byteChunkArray.length);
                            //Set the attachmentId of the file we are now processing
                            attachmentId = result;
                            
                            //Call process byteChunkArray to upload the next piece of the file
                            processByteChunkArray(attachmentId);
                            
                        }else{
                            //If script is here something broke on the JavasSript remoting call
                            //Add classes to reflect error
                            $upload.attr('data-status','complete');
                            $upload.addClass('uploadError');
                            $upload.find(".statusPercent").addClass('statusPercentError');
                            $upload.attr('title',event.message);
                            alert('Error'+event.message);
                            //Check and continue the next file to upload
                            checkForUploads();
                        }
                    });
                }else{
                    //Error handling for bad read
                    alert('Could not read file');
                }
            };
            
        }else{
            //This file has completed, all byte chunks have been uploaded, set status on the div to complete
            $upload.attr('data-status','complete');
            
            
            //Change name of file to link of uploaded attachment
            $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');
            
            //Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process.
            checkForUploads();
        }
    }
    
    </script>
    
    <script type="text/javascript">
    var parentId = '{!parentId}';
     function complete(){
     
     }
    //Will be used by FileUploadJS.js but must be declared here. Static resources don't support dynamic values.
    </script>
    
    <p class="MsoNormal" style="line-height:9.75pt">
        <b>
            <span style="font-size:8.5pt;font-family:&quot;Arial&quot;,sans-serif;color:#333333">Warning: The app doesn't support multiple images taken from Camera. Please use your gallery to upload images
            </span>
        </b>
    </p>
   
    <div class="uploadBox ">
        <table cellpadding="0" cellspacing="0" class="uploadTable">
            <tr>
                <td><input type="file"  multiple="true" id="filesInput" name="file" /></td>
                <td class="buttonTD">
                    <input id="uploadButton" type="button" title="Upload"  value=" Upload " class ="button" styleClass="slds-button slds-button--brand " />
                     
                </td>
            </tr>
            <br/> 
            <tr>
                <td></td>
                <td>
                	&nbsp; &nbsp; &nbsp;
					 <apex:commandButton value="Back"  onclick="sforce.one.navigateToURL('/{!ParentId}')"  styleClass="slds-button slds-button--brand button" /> 
                </td>
            </tr>
        </table>
        </div>
</apex:component>